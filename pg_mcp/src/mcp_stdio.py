#!/usr/bin/env python3
"""
PostgreSQL MCP Server - STDIO Version
ƒê·ªÉ s·ª≠ d·ª•ng v·ªõi VS Code MCP extension v√† c√°c MCP clients kh√°c
"""

import asyncio
import json
import sys
import psycopg2
from typing import Any, Sequence
from mcp.server.models import InitializationOptions
from mcp.server import NotificationOptions, Server
from mcp.server.stdio import stdio_server
from mcp.types import (
    Resource,
    Tool,
    TextContent,
    ImageContent,
    EmbeddedResource,
    LoggingLevel
)
import os

# Load config from config.json
def load_config():
    """Load database configuration from config.json"""
    config_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), "config.json")
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        return config.get("database", {})
    except Exception as e:
        return {}

# Global variables
postgres_connection = None
default_config = load_config()

# Server instance
server = Server("postgres-mcp")

async def connect_postgres(host="localhost", port=5432, user="postgres", password="", database="postgres"):
    """K·∫øt n·ªëi ƒë·∫øn PostgreSQL server"""
    global postgres_connection
    try:
        postgres_connection = psycopg2.connect(
            host=host,
            port=port,
            user=user,
            password=password,
            database=database
        )
        return True
    except Exception as e:
        return False

async def safe_execute_query(query: str, params=None):
    """Th·ª±c thi query an to√†n"""
    global postgres_connection
    if not postgres_connection:
        return {"success": False, "message": "Ch∆∞a k·∫øt n·ªëi ƒë·∫øn PostgreSQL"}
    
    try:
        cursor = postgres_connection.cursor()
        if params:
            cursor.execute(query, params)
        else:
            cursor.execute(query)
        
        # Ki·ªÉm tra xem c√≥ k·∫øt qu·∫£ kh√¥ng
        if cursor.description:
            rows = cursor.fetchall()
            columns = [desc[0] for desc in cursor.description]
            cursor.close()
            return {"success": True, "data": rows, "columns": columns}
        else:
            cursor.close()
            return {"success": True, "message": "Query th·ª±c thi th√†nh c√¥ng"}
    except Exception as e:
        return {"success": False, "message": str(e)}

@server.list_tools()
async def handle_list_tools() -> list[Tool]:
    """
    List available tools.
    Each tool specifies its arguments using JSON Schema validation.
    """
    return [
        Tool(
            name="connect_postgres",
            description="K·∫øt n·ªëi ƒë·∫øn PostgreSQL server",
            inputSchema={
                "type": "object",
                "properties": {
                    "host": {"type": "string", "description": "ƒê·ªãa ch·ªâ server", "default": "localhost"},
                    "port": {"type": "integer", "description": "C·ªïng k·∫øt n·ªëi", "default": 5432},
                    "user": {"type": "string", "description": "T√™n ng∆∞·ªùi d√πng", "default": "postgres"},
                    "password": {"type": "string", "description": "M·∫≠t kh·∫©u"},
                    "database": {"type": "string", "description": "T√™n database", "default": "postgres"}
                },
                "required": ["password"]
            },
        ),
        Tool(
            name="connect_default",
            description="K·∫øt n·ªëi PostgreSQL v·ªõi config m·∫∑c ƒë·ªãnh t·ª´ config.json",
            inputSchema={
                "type": "object",
                "properties": {},
            },
        ),
        Tool(
            name="count_databases",
            description="ƒê·∫øm s·ªë l∆∞·ª£ng database trong PostgreSQL",
            inputSchema={
                "type": "object",
                "properties": {},
            },
        ),
        Tool(
            name="list_databases",
            description="Li·ªát k√™ t·∫•t c·∫£ database",
            inputSchema={
                "type": "object",
                "properties": {},
            },
        ),
        Tool(
            name="list_schemas",
            description="Li·ªát k√™ t·∫•t c·∫£ schema trong database hi·ªán t·∫°i",
            inputSchema={
                "type": "object",
                "properties": {},
            },
        ),
        Tool(
            name="list_tables",
            description="Li·ªát k√™ t·∫•t c·∫£ table trong schema",
            inputSchema={
                "type": "object",
                "properties": {
                    "schema_name": {"type": "string", "description": "T√™n schema", "default": "public"}
                },
            },
        ),
        Tool(
            name="table_structure",
            description="L·∫•y c·∫•u tr√∫c chi ti·∫øt c·ªßa table",
            inputSchema={
                "type": "object",
                "properties": {
                    "table_name": {"type": "string", "description": "T√™n table"},
                    "schema_name": {"type": "string", "description": "T√™n schema", "default": "public"}
                },
                "required": ["table_name"]
            },
        ),
        Tool(
            name="table_data",
            description="L·∫•y d·ªØ li·ªáu t·ª´ table",
            inputSchema={
                "type": "object",
                "properties": {
                    "table_name": {"type": "string", "description": "T√™n table"},
                    "schema_name": {"type": "string", "description": "T√™n schema", "default": "public"},
                    "limit": {"type": "integer", "description": "S·ªë l∆∞·ª£ng record t·ªëi ƒëa", "default": 10}
                },
                "required": ["table_name"]
            },
        ),
        Tool(
            name="execute_query",
            description="Th·ª±c thi SQL query (ch·ªâ SELECT)",
            inputSchema={
                "type": "object",
                "properties": {
                    "query": {"type": "string", "description": "SQL query ƒë·ªÉ th·ª±c thi"},
                    "limit": {"type": "integer", "description": "S·ªë l∆∞·ª£ng record t·ªëi ƒëa", "default": 100}
                },
                "required": ["query"]
            },
        ),
    ]

@server.call_tool()
async def handle_call_tool(name: str, arguments: dict | None) -> list[TextContent | ImageContent | EmbeddedResource]:
    """
    Handle tool execution requests.
    """
    if arguments is None:
        arguments = {}

    try:
        if name == "connect_postgres":
            result = await connect_postgres(
                host=arguments.get("host", "localhost"),
                port=arguments.get("port", 5432),
                user=arguments.get("user", "postgres"),
                password=arguments.get("password", ""),
                database=arguments.get("database", "postgres")
            )
            message = "‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!" if result else "‚ùå K·∫øt n·ªëi th·∫•t b·∫°i!"
            return [TextContent(type="text", text=message)]

        elif name == "connect_default":
            if not default_config:
                return [TextContent(type="text", text="‚ùå Kh√¥ng t√¨m th·∫•y config.json")]
            
            result = await connect_postgres(
                host=default_config.get("host", "localhost"),
                port=default_config.get("port", 5432),
                user=default_config.get("user", "postgres"),
                password=default_config.get("password", ""),
                database=default_config.get("database", "postgres")
            )
            message = "‚úÖ K·∫øt n·ªëi th√†nh c√¥ng v·ªõi config m·∫∑c ƒë·ªãnh!" if result else "‚ùå K·∫øt n·ªëi th·∫•t b·∫°i!"
            return [TextContent(type="text", text=message)]

        elif name == "count_databases":
            result = await safe_execute_query(
                "SELECT COUNT(*) FROM pg_database WHERE datistemplate = false;"
            )
            if result["success"]:
                count = result["data"][0][0]
                return [TextContent(type="text", text=f"üìä S·ªë l∆∞·ª£ng database: {count}")]
            else:
                return [TextContent(type="text", text=f"‚ùå {result['message']}")]

        elif name == "list_databases":
            result = await safe_execute_query(
                "SELECT datname FROM pg_database WHERE datistemplate = false ORDER BY datname;"
            )
            if result["success"]:
                databases = [row[0] for row in result["data"]]
                db_list = "\n".join([f"‚Ä¢ {db}" for db in databases])
                return [TextContent(type="text", text=f"üìã Danh s√°ch database:\n{db_list}")]
            else:
                return [TextContent(type="text", text=f"‚ùå {result['message']}")]

        elif name == "list_schemas":
            result = await safe_execute_query("""
                SELECT schema_name 
                FROM information_schema.schemata 
                WHERE schema_name NOT IN ('information_schema', 'pg_catalog', 'pg_toast')
                ORDER BY schema_name;
            """)
            if result["success"]:
                schemas = [row[0] for row in result["data"]]
                schema_list = "\n".join([f"‚Ä¢ {schema}" for schema in schemas])
                return [TextContent(type="text", text=f"üóÇÔ∏è Danh s√°ch schema:\n{schema_list}")]
            else:
                return [TextContent(type="text", text=f"‚ùå {result['message']}")]

        elif name == "list_tables":
            schema_name = arguments.get("schema_name", "public")
            result = await safe_execute_query("""
                SELECT table_name, table_type
                FROM information_schema.tables 
                WHERE table_schema = %s
                ORDER BY table_name;
            """, (schema_name,))
            if result["success"]:
                tables = [f"‚Ä¢ {row[0]} ({row[1]})" for row in result["data"]]
                table_list = "\n".join(tables)
                return [TextContent(type="text", text=f"üìã Tables trong schema '{schema_name}':\n{table_list}")]
            else:
                return [TextContent(type="text", text=f"‚ùå {result['message']}")]

        elif name == "table_structure":
            table_name = arguments.get("table_name")
            schema_name = arguments.get("schema_name", "public")
            
            # L·∫•y th√¥ng tin c·ªôt
            result = await safe_execute_query("""
                SELECT 
                    column_name,
                    data_type,
                    is_nullable,
                    column_default,
                    character_maximum_length
                FROM information_schema.columns 
                WHERE table_schema = %s AND table_name = %s
                ORDER BY ordinal_position;
            """, (schema_name, table_name))
            
            if result["success"]:
                columns_info = []
                for row in result["data"]:
                    col_name, data_type, nullable, default, max_len = row
                    info = f"‚Ä¢ {col_name}: {data_type}"
                    if max_len:
                        info += f"({max_len})"
                    if nullable == "NO":
                        info += " NOT NULL"
                    if default:
                        info += f" DEFAULT {default}"
                    columns_info.append(info)
                
                structure = "\n".join(columns_info)
                return [TextContent(type="text", text=f"üèóÔ∏è C·∫•u tr√∫c table '{table_name}':\n{structure}")]
            else:
                return [TextContent(type="text", text=f"‚ùå {result['message']}")]

        elif name == "table_data":
            table_name = arguments.get("table_name")
            schema_name = arguments.get("schema_name", "public")
            limit = arguments.get("limit", 10)
            
            result = await safe_execute_query(
                f'SELECT * FROM "{schema_name}"."{table_name}" LIMIT %s;',
                (limit,)
            )
            
            if result["success"]:
                if not result["data"]:
                    return [TextContent(type="text", text=f"üìä Table '{table_name}' kh√¥ng c√≥ d·ªØ li·ªáu")]
                
                # Format d·ªØ li·ªáu
                columns = result["columns"]
                data_text = f"üìä D·ªØ li·ªáu t·ª´ table '{table_name}' (t·ªëi ƒëa {limit} records):\n\n"
                data_text += "Columns: " + " | ".join(columns) + "\n"
                data_text += "-" * 80 + "\n"
                
                for row in result["data"][:5]:  # Ch·ªâ hi·ªÉn th·ªã 5 d√≤ng ƒë·∫ßu
                    row_text = " | ".join([str(val)[:20] if val is not None else "NULL" for val in row])
                    data_text += row_text + "\n"
                
                if len(result["data"]) > 5:
                    data_text += f"\n... v√† {len(result['data']) - 5} d√≤ng kh√°c"
                
                return [TextContent(type="text", text=data_text)]
            else:
                return [TextContent(type="text", text=f"‚ùå {result['message']}")]

        elif name == "execute_query":
            query = arguments.get("query", "")
            limit = arguments.get("limit", 100)
            
            # Ki·ªÉm tra query ch·ªâ l√† SELECT
            if not query.lower().strip().startswith('select'):
                return [TextContent(type="text", text="‚ùå Ch·ªâ cho ph√©p SELECT query ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n")]
            
            # Th√™m LIMIT n·∫øu ch∆∞a c√≥
            if 'limit' not in query.lower():
                query = f"{query.rstrip(';')} LIMIT {limit};"
            
            result = await safe_execute_query(query)
            
            if result["success"]:
                if not result["data"]:
                    return [TextContent(type="text", text="üìä Query kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu")]
                
                columns = result["columns"]
                data_text = f"üìä K·∫øt qu·∫£ query:\n\n"
                data_text += "Columns: " + " | ".join(columns) + "\n"
                data_text += "-" * 80 + "\n"
                
                for row in result["data"][:10]:  # Ch·ªâ hi·ªÉn th·ªã 10 d√≤ng ƒë·∫ßu
                    row_text = " | ".join([str(val)[:20] if val is not None else "NULL" for val in row])
                    data_text += row_text + "\n"
                
                if len(result["data"]) > 10:
                    data_text += f"\n... v√† {len(result['data']) - 10} d√≤ng kh√°c"
                
                return [TextContent(type="text", text=data_text)]
            else:
                return [TextContent(type="text", text=f"‚ùå {result['message']}")]

        else:
            return [TextContent(type="text", text=f"‚ùå Tool '{name}' kh√¥ng t·ªìn t·∫°i")]

    except Exception as e:
        return [TextContent(type="text", text=f"‚ùå L·ªói: {str(e)}")]

async def main():
    # Run the server using stdio
    async with stdio_server() as (read_stream, write_stream):
        await server.run(
            read_stream,
            write_stream,
            InitializationOptions(
                server_name="postgres-mcp",
                server_version="1.0.0",
                capabilities=server.get_capabilities(
                    notification_options=NotificationOptions(),
                    experimental_capabilities={},
                ),
            ),
        )

if __name__ == "__main__":
    asyncio.run(main())
