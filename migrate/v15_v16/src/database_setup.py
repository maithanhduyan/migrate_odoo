"""
Database Setup Module - T·∫°o database demo ƒë·∫ßy ƒë·ªß cho Odoo v15 v√† v16
Tu√¢n th·ªß nguy√™n t·∫Øc Elon Musk: First Principles, T·ªëi gi·∫£n, Automation

@author: Migration Team
@version: 1.0.0
"""

import os
import time
import logging
import json
import subprocess
from typing import Dict, List, Any, Optional, Tuple
from pathlib import Path

import psycopg2
import requests
import docker

from .config import Config
from .utils import (
    check_container_running,
    check_database_connection,
    DockerManager,
    setup_logging
)
from .module_installer import OdooModuleInstaller


class DatabaseSetup:
    """Class qu·∫£n l√Ω vi·ªác t·∫°o v√† setup database demo"""

    def __init__(self, config: Config):
        self.config = config
        self.logger = setup_logging()
        self.docker_manager = DockerManager()
        self.module_installer = OdooModuleInstaller(config)

    def setup_demo_databases(self) -> Dict[str, Any]:
        """
        T·∫°o c·∫£ 2 database demo v15 v√† v16 v·ªõi ƒë·∫ßy ƒë·ªß d·ªØ li·ªáu

        Returns:
            Dict ch·ª©a th√¥ng tin setup v√† k·∫øt qu·∫£
        """
        self.logger.info("üöÄ B·∫Øt ƒë·∫ßu setup demo databases cho v15 v√† v16...")

        results = {
            'v15': {'status': 'pending', 'database': self.config.migration.demo_database_v15},
            'v16': {'status': 'pending', 'database': self.config.migration.demo_database_v16},
            'summary': {}
        }

        try:
            # 1. Ki·ªÉm tra v√† chu·∫©n b·ªã m√¥i tr∆∞·ªùng
            self._prepare_environment()

            # 2. Setup database v15
            self.logger.info("üì¶ Setup database demo cho Odoo v15...")
            results['v15'] = self._setup_single_database('v15')

            # 3. Setup database v16
            self.logger.info("üì¶ Setup database demo cho Odoo v16...")
            results['v16'] = self._setup_single_database('v16')

            # 4. T·∫°o summary
            results['summary'] = self._create_summary(results)

            self.logger.info("‚úÖ Ho√†n th√†nh setup demo databases!")
            return results

        except Exception as e:
            self.logger.error(f"‚ùå L·ªói khi setup demo databases: {e}")
            results['error'] = str(e)
            return results

    def _prepare_environment(self) -> None:
        """Chu·∫©n b·ªã m√¥i tr∆∞·ªùng cho vi·ªác setup database"""
        self.logger.info("üîß Chu·∫©n b·ªã m√¥i tr∆∞·ªùng...")

        # Ki·ªÉm tra PostgreSQL
        if not check_database_connection(self.config.postgresql):
            raise Exception("PostgreSQL kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c")

        self.logger.info("‚úÖ PostgreSQL s·∫µn s√†ng")

    def _setup_single_database(self, version: str) -> Dict[str, Any]:
        """
        Setup database cho m·ªôt phi√™n b·∫£n Odoo c·ª• th·ªÉ

        Args:
            version: v15 ho·∫∑c v16

        Returns:
            Dict ch·ª©a k·∫øt qu·∫£ setup
        """
        result = {
            'status': 'in_progress',
            'database': getattr(self.config.migration, f'demo_database_{version}'),
            'version': version,
            'modules_installed': [],
            'demo_data_added': False,
            'error': None
        }

        try:
            database_name = result['database']
            odoo_config = getattr(self.config, f'odoo_{version}')

            self.logger.info(f"üèóÔ∏è T·∫°o database {database_name} cho {version}")

            # 1. T·∫°o PostgreSQL database
            self._create_postgresql_database(database_name)

            # 2. Kh·ªüi ƒë·ªông Odoo container
            self._start_odoo_container(version)

            # 3. Ch·ªù Odoo s·∫µn s√†ng (tƒÉng timeout l√™n 240s)
            self._wait_for_odoo_ready(odoo_config.web_url, timeout=240)

            # 4. T·∫°o Odoo database v·ªõi demo data
            self._create_odoo_database(
                odoo_config.web_url, database_name, version)

            # 5. C√†i ƒë·∫∑t modules Odoo CE
            installed_modules = self._install_odoo_modules(
                odoo_config.web_url, database_name, version)
            result['modules_installed'] = installed_modules

            # 6. Th√™m demo data n√¢ng cao (optional)
            result['demo_data_added'] = self._add_advanced_demo_data(
                database_name, version)

            result['status'] = 'completed'
            self.logger.info(f"‚úÖ Ho√†n th√†nh setup database {database_name}")

        except Exception as e:
            self.logger.error(f"‚ùå L·ªói khi setup database {version}: {e}")
            result['status'] = 'failed'
            result['error'] = str(e)

        return result

    def _create_postgresql_database(self, database_name: str) -> None:
        """T·∫°o PostgreSQL database"""
        self.logger.info(f"üóÑÔ∏è T·∫°o PostgreSQL database: {database_name}")

        try:
            # K·∫øt n·ªëi ƒë·∫øn PostgreSQL
            conn = psycopg2.connect(
                host='localhost',
                port=self.config.postgresql.port,
                user=self.config.postgresql.user,
                password=self.config.postgresql.password,
                database='postgres'
            )
            conn.autocommit = True

            with conn.cursor() as cursor:
                # Ki·ªÉm tra database ƒë√£ t·ªìn t·∫°i ch∆∞a
                cursor.execute(
                    "SELECT 1 FROM pg_database WHERE datname = %s",
                    (database_name,)
                )

                if cursor.fetchone():
                    self.logger.info(f"Database {database_name} ƒë√£ t·ªìn t·∫°i")
                else:
                    # T·∫°o database m·ªõi
                    cursor.execute(f'CREATE DATABASE "{database_name}"')
                    self.logger.info(f"‚úÖ ƒê√£ t·∫°o database {database_name}")

            conn.close()

        except Exception as e:
            raise Exception(
                f"L·ªói t·∫°o PostgreSQL database {database_name}: {e}")

    def _start_odoo_container(self, version: str) -> None:
        """Kh·ªüi ƒë·ªông Odoo container"""
        odoo_config = getattr(self.config, f'odoo_{version}')

        # Ki·ªÉm tra container ƒë√£ ch·∫°y ch∆∞a
        if check_container_running(odoo_config.container_name):
            self.logger.info(f"Container {odoo_config.container_name} ƒë√£ ch·∫°y")
            return        # Kh·ªüi ƒë·ªông container t·ª´ docker-compose
        # TODO: Implement container start logic
        self.logger.info(f"Starting container {odoo_config.container_name}...")

        # For now, assume container is already running
        if not check_container_running(odoo_config.container_name):
            self.logger.warning(
                f"Container {odoo_config.container_name} is not running. Please start it manually.")

        # Ch·ªù container kh·ªüi ƒë·ªông
        time.sleep(15)

    def _wait_for_odoo_ready(self, web_url: str, timeout: int = 240) -> None:
        """Ch·ªù Odoo s·∫µn s√†ng v·ªõi timeout tƒÉng l√™n"""
        start_time = time.time()

        while time.time() - start_time < timeout:
            try:
                response = requests.get(
                    f"{web_url}/web/database/selector",
                    timeout=10
                )
                if response.status_code == 200:
                    self.logger.info("Odoo ƒë√£ s·∫µn s√†ng!")
                    return
            except requests.RequestException:
                pass

            time.sleep(5)

        raise Exception(f"Odoo kh√¥ng s·∫µn s√†ng sau {timeout} gi√¢y")

    def _create_odoo_database(self, web_url: str, database_name: str, version: str) -> None:
        """T·∫°o Odoo database qua odoo-bin command"""
        self.logger.info(
            f"üèóÔ∏è Creating Odoo database {database_name} via command line...")

        try:
            result = self.module_installer.create_database_with_demo(
                version, database_name)

            if result['status'] != 'completed':
                raise Exception(
                    f"Database creation failed: {result.get('error', 'Unknown error')}")

            self.logger.info(
                f"‚úÖ Database {database_name} created successfully")

        except Exception as e:
            raise Exception(f"Failed to create Odoo database: {e}")

    def _install_odoo_modules(self, web_url: str, database_name: str, version: str) -> List[str]:
        """C√†i ƒë·∫∑t c√°c modules Odoo CE"""
        self.logger.info(f"üì¶ Installing Odoo CE modules for {version}...")

        try:
            # L·∫•y danh s√°ch modules c√≥ s·∫µn
            available_modules = self.module_installer.get_available_modules(
                version)

            # L·ªçc modules ph√π h·ª£p v·ªõi phi√™n b·∫£n
            modules_to_install = self._filter_modules_for_version(version)

            # Ch·ªâ c√†i modules c√≥ s·∫µn
            filtered_modules = [
                m for m in modules_to_install if m in available_modules]

            self.logger.info(
                f"Found {len(available_modules)} available modules, installing {len(filtered_modules)} CE modules")

            # C√†i ƒë·∫∑t modules theo batch
            installed_modules = []
            batch_size = 10

            for i in range(0, len(filtered_modules), batch_size):
                batch = filtered_modules[i:i + batch_size]

                try:                    # S·ª≠ d·ª•ng method c√≥ s·∫µn trong module_installer
                    result = self.module_installer.install_modules_via_command(
                        version, database_name, batch)

                    if result.get('status') == 'completed':
                        installed_modules.extend(batch)
                        self.logger.info(
                            f"‚úÖ Installed batch {i // batch_size + 1}: {len(batch)} modules")
                    else:
                        self.logger.warning(
                            f"‚ö†Ô∏è Failed to install batch {i // batch_size + 1}: {result.get('error', 'Unknown error')}")

                except Exception as e:
                    self.logger.error(
                        f"‚ùå Error installing batch {i // batch_size + 1}: {e}")

            self.logger.info(
                f"‚úÖ Completed module installation: {len(installed_modules)}/{len(filtered_modules)} modules installed")
            return installed_modules

        except Exception as e:
            self.logger.error(f"‚ùå Error in module installation: {e}")
            return []

    def _filter_modules_for_version(self, version: str) -> List[str]:
        """L·ªçc modules ph√π h·ª£p v·ªõi phi√™n b·∫£n Odoo"""
        # Danh s√°ch modules c∆° b·∫£n cho c·∫£ v15 v√† v16
        basic_modules = [
            'base', 'web', 'mail', 'contacts', 'base_setup',
            'account', 'sale', 'purchase', 'stock', 'crm',
            'project', 'hr', 'hr_timesheet', 'hr_holidays',
            'website', 'mass_mailing', 'calendar', 'note',
            'maintenance', 'fleet', 'survey'
        ]

        if version == 'v15':
            return basic_modules + [
                'sale_management', 'purchase_stock', 'mrp',
                'account_payment', 'hr_attendance', 'website_sale',
                'point_of_sale', 'event'
            ]
        elif version == 'v16':
            return basic_modules + [
                'sale_management', 'purchase_stock', 'mrp',
                'account_payment', 'hr_attendance', 'website_sale',
                'point_of_sale', 'event', 'documents'
            ]
        else:
            return basic_modules

    def _add_advanced_demo_data(self, database_name: str, version: str) -> bool:
        """Th√™m demo data n√¢ng cao"""
        self.logger.info(f"üìä Adding advanced demo data to {database_name}...")

        try:
            # TODO: Implement advanced demo data creation
            self.logger.info("‚úÖ Demo data added successfully")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå Failed to add demo data: {e}")
            return False

    def _create_summary(self, results: Dict[str, Any]) -> Dict[str, Any]:
        """T·∫°o summary t·ª´ k·∫øt qu·∫£ setup"""
        summary = {
            'total_databases': 2,
            'successful': 0,
            'failed': 0,
            'total_modules_installed': 0,
            'databases': []
        }

        for version in ['v15', 'v16']:
            result = results[version]

            if result['status'] == 'completed':
                summary['successful'] += 1
                summary['total_modules_installed'] += len(
                    result.get('modules_installed', []))
            elif result['status'] == 'failed':
                summary['failed'] += 1

            summary['databases'].append({
                'version': version,
                'database': result['database'],
                'status': result['status'],
                'modules_count': len(result.get('modules_installed', [])),
                'demo_data': result.get('demo_data_added', False)
            })

        return summary

    def check_demo_databases(self) -> Dict[str, Any]:
        """Ki·ªÉm tra tr·∫°ng th√°i c√°c database demo"""
        self.logger.info("üîç Checking demo databases status...")

        results = {
            'v15': self._check_single_database('v15'),
            'v16': self._check_single_database('v16')
        }

        return results

    def _check_single_database(self, version: str) -> Dict[str, Any]:
        """Ki·ªÉm tra m·ªôt database c·ª• th·ªÉ"""
        database_name = getattr(self.config.migration,
                                f'demo_database_{version}')

        result = {
            'database': database_name,
            'version': version,
            'exists': False,
            'odoo_accessible': False,
            'modules_count': 0,
            'error': None
        }

        try:
            # Ki·ªÉm tra database t·ªìn t·∫°i trong PostgreSQL
            conn = psycopg2.connect(
                host='localhost',
                port=self.config.postgresql.port,
                user=self.config.postgresql.user,
                password=self.config.postgresql.password,
                database='postgres'
            )

            with conn.cursor() as cursor:
                cursor.execute(
                    "SELECT 1 FROM pg_database WHERE datname = %s",
                    (database_name,)
                )
                result['exists'] = cursor.fetchone() is not None

            conn.close()

            if result['exists']:
                # Ki·ªÉm tra Odoo c√≥ truy c·∫≠p ƒë∆∞·ª£c kh√¥ng
                odoo_config = getattr(self.config, f'odoo_{version}')
                try:
                    response = requests.get(
                        f"{odoo_config.web_url}/web/database/selector", timeout=10)
                    result['odoo_accessible'] = response.status_code == 200
                except BaseException:
                    result['odoo_accessible'] = False

                # ƒê·∫øm s·ªë modules ƒë√£ c√†i (n·∫øu truy c·∫≠p ƒë∆∞·ª£c)
                if result['odoo_accessible']:
                    result['modules_count'] = self._count_installed_modules(
                        database_name, version)

        except Exception as e:
            result['error'] = str(e)

        return result

    def _count_installed_modules(self, database_name: str, version: str) -> int:
        """ƒê·∫øm s·ªë modules ƒë√£ c√†i ƒë·∫∑t"""
        try:
            # K·∫øt n·ªëi tr·ª±c ti·∫øp ƒë·∫øn database ƒë·ªÉ ƒë·∫øm modules
            conn = psycopg2.connect(
                host='localhost',
                port=self.config.postgresql.port,
                user=self.config.postgresql.user,
                password=self.config.postgresql.password,
                database=database_name
            )

            with conn.cursor() as cursor:
                cursor.execute(
                    "SELECT COUNT(*) FROM ir_module_module WHERE state = 'installed'"
                )
                result = cursor.fetchone()
                count = result[0] if result else 0

            conn.close()
            return count

        except BaseException:
            return 0

    def cleanup_demo_databases(self, force: bool = False) -> Dict[str, Any]:
        """D·ªçn d·∫πp c√°c database demo"""
        self.logger.info("üßπ Cleaning up demo databases...")

        results = {
            'v15': self._cleanup_single_database('v15', force),
            'v16': self._cleanup_single_database('v16', force)
        }

        return results

    def _cleanup_single_database(self, version: str, force: bool = False) -> Dict[str, Any]:
        """D·ªçn d·∫πp m·ªôt database c·ª• th·ªÉ"""
        database_name = getattr(self.config.migration,
                                f'demo_database_{version}')

        result = {
            'database': database_name,
            'version': version,
            'deleted': False,
            'error': None
        }

        try:
            # Ki·ªÉm tra database c√≥ t·ªìn t·∫°i kh√¥ng
            conn = psycopg2.connect(
                host='localhost',
                port=self.config.postgresql.port,
                user=self.config.postgresql.user,
                password=self.config.postgresql.password,
                database='postgres'
            )
            conn.autocommit = True

            with conn.cursor() as cursor:
                cursor.execute(
                    "SELECT 1 FROM pg_database WHERE datname = %s",
                    (database_name,)
                )

                if cursor.fetchone():
                    if force:
                        # Terminate all connections to the database
                        cursor.execute(f"""
                            SELECT pg_terminate_backend(pid)
                            FROM pg_stat_activity
                            WHERE datname = '{database_name}' AND pid <> pg_backend_pid()
                        """)

                        # Drop database
                        cursor.execute(f'DROP DATABASE "{database_name}"')
                        result['deleted'] = True
                        self.logger.info(f"‚úÖ Deleted database {database_name}")
                    else:
                        self.logger.info(
                            f"Database {database_name} exists but not deleted (use --force)")
                else:
                    self.logger.info(
                        f"Database {database_name} does not exist")

            conn.close()

        except Exception as e:
            result['error'] = str(e)
            self.logger.error(f"‚ùå Error cleaning up {database_name}: {e}")

        return result
